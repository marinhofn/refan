[
    {
        "repository": "https://github.com/test/pure-refactoring",
        "commit_hash_before": "abcdef1234567890abcdef1234567890abcdef12",
        "commit_hash_current": "1234567890abcdef1234567890abcdef12345678",
        "commit_message": "Refactoring: Renamed variables for better clarity and extracted common methods",
        "diff": "diff --git a/src/main/java/com/example/Calculator.java b/src/main/java/com/example/Calculator.java\nindex 1234567..7654321 100644\n--- a/src/main/java/com/example/Calculator.java\n+++ b/src/main/java/com/example/Calculator.java\n@@ -10,15 +10,23 @@ public class Calculator {\n     private static final Logger logger = LoggerFactory.getLogger(Calculator.class);\n \n     public int add(int a, int b) {\n-        int result = a + b;\n-        logger.debug(\"Adding {} and {}: {}\", a, b, result);\n+        int result = performAddition(a, b);\n+        logOperation(\"Adding\", a, b, result);\n         return result;\n     }\n \n     public int subtract(int a, int b) {\n-        int result = a - b;\n-        logger.debug(\"Subtracting {} from {}: {}\", b, a, result);\n+        int result = performSubtraction(a, b);\n+        logOperation(\"Subtracting\", b, a, result);\n         return result;\n     }\n+    \n+    private int performAddition(int a, int b) {\n+        return a + b;\n+    }\n+    \n+    private int performSubtraction(int a, int b) {\n+        return a - b;\n+    }\n+    \n+    private void logOperation(String operation, int a, int b, int result) {\n+        logger.debug(\"{} {} and {}: {}\", operation, a, b, result);\n+    }\n }"
    },
    {
        "repository": "https://github.com/test/masked-floss-refactoring",
        "commit_hash_before": "9876543210fedcba9876543210fedcba98765432",
        "commit_hash_current": "fedcba9876543210fedcba9876543210fedcba98",
        "commit_message": "Code cleanup: renamed variables and improved structure for better readability",
        "diff": "diff --git a/src/main/java/com/example/UserService.java b/src/main/java/com/example/UserService.java\nindex abcdef1..fedcba9 100644\n--- a/src/main/java/com/example/UserService.java\n+++ b/src/main/java/com/example/UserService.java\n@@ -15,12 +15,15 @@ public class UserService {\n     private UserRepository userRepository;\n     private EmailService emailService;\n     \n-    public User registerUser(String username, String password, String email) {\n+    public User registerUser(String username, String password, String email) throws DuplicateUserException {\n         User existingUser = userRepository.findByUsername(username);\n         if (existingUser != null) {\n-            logger.warn(\"Username {} already exists\", username);\n-            return null;\n+            logger.warn(\"Registration failed: Username {} already exists\", username);\n+            throw new DuplicateUserException(\"Username already exists: \" + username);\n         }\n+        \n+        // New feature: Email validation\n+        validateEmail(email);\n \n         User user = new User();\n         user.setUsername(username);\n@@ -28,10 +31,31 @@ public class UserService {\n         user.setEmail(email);\n         user.setCreatedAt(new Date());\n         \n+        // New feature: Account activation\n+        user.setActivated(false);\n+        String activationToken = generateActivationToken();\n+        user.setActivationToken(activationToken);\n+        \n         userRepository.save(user);\n+        \n+        // Send activation email\n+        emailService.sendActivationEmail(user.getEmail(), activationToken);\n         \n         logger.info(\"User {} registered successfully\", username);\n         return user;\n     }\n+    \n+    private void validateEmail(String email) {\n+        if (email == null || !email.matches(\"^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$\")) {\n+            throw new IllegalArgumentException(\"Invalid email format\");\n+        }\n+        \n+        if (userRepository.findByEmail(email) != null) {\n+            throw new DuplicateUserException(\"Email already registered\");\n+        }\n+    }\n+    \n+    private String generateActivationToken() {\n+        return UUID.randomUUID().toString();\n+    }\n }"
    }
]
