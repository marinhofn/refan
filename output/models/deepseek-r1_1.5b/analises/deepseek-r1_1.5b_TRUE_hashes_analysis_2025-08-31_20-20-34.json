{
  "session_info": {
    "model_used": "deepseek-r1:1.5b",
    "analysis_type": "TRUE_hashes",
    "description": "Análise de hashes com classificação Purity=TRUE",
    "csv_file_analyzed": "csv/llm_analysis_csv/deepseek-r1_1.5b_true_purity_hashes_with_analysis.csv",
    "start_time": "2025-08-31T20:20:28.396227",
    "end_time": "2025-08-31T20:33:09.069191",
    "total_processed": 15,
    "successful_analyses": 14,
    "failed_analyses": 0,
    "skipped_already_analyzed": 539,
    "processing_errors": 0
  },
  "detailed_analyses": [
    {
      "hash": "8b612816edd47b534af19d93af31010364c0fb3d",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "Analysis failed - insufficient data",
      "llm_confidence": "low",
      "project_name": "easy-batch",
      "analysis_timestamp": "2025-08-31T20:20:34.626951",
      "diff_size": 19815,
      "diff_lines": 453,
      "llm_raw_response": "I've analyzed the provided diff and provided a detailed analysis based on the instructions.\n\n1. **Behavioral vs Structural Modifications**:\n   - The changes include behavioral modifications such as adding logging for record processing, filtering, and validation.\n   - There are also structural modifications like creating an `EasyBatchEngineBuilder` class with methods to add event listeners and configure the event manager.\n\n2. **Technical Indicators**:\n   - Behavioral modifications focus on improving logging and tracking of events during record processing.\n   - Structural modifications involve creating a new class for configuring the event manager and adding methods for setting up event listeners.\n\n3. **Analysis**:\n   - The changes enhance the functionality by improving logging and tracking, but they also introduce a new configuration layer (EasyBatchEngineBuilder) to manage event listeners.\n   - This results in a more modular and maintainable codebase with better separation of concerns between logging, configuration, and core functionality.\n\n4. **Final Classification**:\n   - The changes are **FLOSS**: They improve functionality while introducing some structural complexity.\n\n```json\n{\n  \"classification\": \"FLOSS\",\n  \"diff_source\": \"diff --git a/easybatch-core/src/main/java/org/easybatch/core/impl/EasyBatchEngineBuilder.java b/easybatch-core/src/main/java/org/easybatch/core/impl/EasyBatchEngineBuilder.java\"\n}\n```",
      "repository": "easy-batch",
      "commit_hash_before": "9f99bc1bb4100b59aaa5ad16807adec23999e882",
      "commit_hash_current": "8b612816edd47b534af19d93af31010364c0fb3d",
      "technical_evidence": "private openRecordReader() : void extracted from public call() : EasyBatchReport in class org.easybatch.core.impl.EasyBatchEngine; private processRecord(currentRecordNumber int, typedRecord Object) : void extracted from public call() : EasyBatchReport in class org.easybatch.core.impl.EasyBatchEngine; private validateRecord(typedRecord Object) : Set<ValidationError> extracted from public call() : EasyBatchReport in class org.easybatch.core.impl.EasyBatchEngine",
      "diff_source": "diff --git a/easybatch-core/src/main/java/org/easybatch/core/impl/EasyBatchEngineBuilder.java b/easybatch-core/src/main/java/org/easybatch/core/impl/EasyBatchEngineBuilder.java"
    },
    {
      "hash": "8c61fc28834ca3ebf0f1e736a8d1e4eef2891278",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "Analysis failed - insufficient data",
      "llm_confidence": "low",
      "project_name": "restlet-framework-java",
      "analysis_timestamp": "2025-08-31T20:20:39.444120",
      "diff_size": 426005,
      "diff_lines": 10645,
      "llm_raw_response": "Here is the step-by-step explanation of the changes made to the JaxrsIntrospector class:\n\n1. **Behavioral vs Structural Modifications**:\n   - The `JaxrsIntrospector` class was modified from a pure Java class to include JAX-RS compatibility.\n   - It now handles authentication and authorization for RESTful requests.\n\n2. **Technical Indicators**:\n   - Added support for JAX-RS core concepts like `Application`, `Request`, and `Query`.\n   - Implemented methods for handling request parameters, query parameters, and response processing.\n\n3. **Changes Made**:\n   - Created a `Request` object to manage HTTP requests.\n   - Added logic to process request parameters using `PathParam`.\n   - Included a method to handle query parameters with `QueryParam`.\n\n4. **Final Classification**:\n\n```json\n{\n  \"classification\": \"FLOSS\",\n  \"diff_source\": \"diff --git a/modules/org/restlet/ext/apispark/JaxrsIntrospector.java b/modules/org/restlet/ext/apispark/JaxrsIntrospector.java\"\n}\n```",
      "repository": "restlet-framework-java",
      "commit_hash_before": "aa35a4f4842398722602ea80a4c7e31be41ef98e",
      "commit_hash_current": "8c61fc28834ca3ebf0f1e736a8d1e4eef2891278",
      "technical_evidence": "protected getApplicationInfo(application Application, baseRef Reference) : ApplicationInfo from class org.restlet.ext.apispark.Introspector to protected getApplicationInfo(application Application, baseRef Reference) : ApplicationInfo from class org.restlet.ext.apispark.ApplicationIntrospector; private getNextRouter(current Restlet) : Router from class org.restlet.ext.apispark.Introspector to private getNextRouter(current Restlet) : Router from class org.restlet.ext.apispark.ApplicationIntrospector; private getResourceInfo(applicationInfo ApplicationInfo, filter Filter, path String, scheme ChallengeScheme) : ResourceInfo from class org.restlet.ext.apispark.Introspector to private getResourceInfo(applicationInfo ApplicationInfo, filter Filter, path String, scheme ChallengeScheme) : ResourceInfo from class org.restlet.ext.apispark.ApplicationIntrospector",
      "diff_source": "diff --git a/modules/org/restlet/ext/apispark/JaxrsIntrospector.java b/modules/org/restlet/ext/apispark/JaxrsIntrospector.java"
    },
    {
      "hash": "8c912df4591f5054a574b55be9b57d0b9157319d",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "Here is the step-by-step analysis of the changes made to the `ClientManager` class:\n\n1. **Behavioral Changes**:\n   - Added logging for various operations such as joining, leaving, and being locked.\n   - Introduced a list-based approach for sending messages to clients during joins.\n   - Modified the `locked` method to log when a participant is locked.\n\n2. **Structural Modifications**:\n   - Replaced static lists with dynamic objects in several methods.\n   - Simplified the message structure sent to clients by using a consistent format.\n   - Removed unnecessary logging and replaced it with more relevant information.\n\n3. **Technical Indicators**:\n   - The changes focus on improving client communication while maintaining encapsulation.\n   - They enhance logging accuracy and reduce redundancy.\n   - The approach is both pure (no external dependencies) and efficient in terms of logging.\n\n```diff\ndiff --git a/bigbluebutton-apps/src/main/java/org/bigbluebutton/webconference/voice/ClientManager.java b/bigbluebutton-apps/src/main/java/org/bigbluebutton/webconference/voice/ClientManager.java\nindex 3a2aa8fbbc..129d11cc56 100755\n--- a/bigbluebutton-apps/src/main/java/org/bigbluebutton/webconference/voice/ClientManager.java\n+++ b/bigbluebutton-apps/src/main/java/org/bigbluebutton/webconference/voice/ClientManager.java\n@@ -1,4 +1,3 @@\n-package org.bigbluebutton.webconference.voice;\n+package org.bigbluebutton.webconference.voice;\n\n import java.util.ArrayList;\n import java.util.List;\n@@ -25,7 +25,6 @@ private class ClientManager implements ClientNotifier {\n     }\n \n private void joined(String room, Integer participantId, String name, Boolean muted,\n-\t\t\tJoiner joiner, boolean talking, boolean locked) {\n+\t\t\tJoiner joiner, boolean locked) {\n \t\tlog.debug(\"Participant \" + name + \" joining room \" + room);\n @@ -35,10 +34,7 @@ private void joined(String room, Integer participantId, String name, Boolean muted,\n     }\n \n private void left(String room, Joiner joiner) {\n-\t}\n+\t}\n \n private void locked(String room, Integer participantId, boolean locked) {\n-log.debug(\"Participant \" + participantId + \" is locked = \" + locked);\n+\t}\n \n private void talking(String room, Integer participantId, boolean talking) {\n-log.debug(\"Participant \" + participantId + \" is talking = \" + talking);\n+\t}\n \n private void locked(String room, Integer participantId, boolean locked) {\n+\t}\n```",
      "llm_confidence": "low",
      "project_name": "bigbluebutton",
      "analysis_timestamp": "2025-08-31T20:20:48.012646",
      "diff_size": 2813054,
      "diff_lines": 53779,
      "llm_raw_response": "Here is the step-by-step analysis of the changes made to the `ClientManager` class:\n\n1. **Behavioral Changes**:\n   - Added logging for various operations such as joining, leaving, and being locked.\n   - Introduced a list-based approach for sending messages to clients during joins.\n   - Modified the `locked` method to log when a participant is locked.\n\n2. **Structural Modifications**:\n   - Replaced static lists with dynamic objects in several methods.\n   - Simplified the message structure sent to clients by using a consistent format.\n   - Removed unnecessary logging and replaced it with more relevant information.\n\n3. **Technical Indicators**:\n   - The changes focus on improving client communication while maintaining encapsulation.\n   - They enhance logging accuracy and reduce redundancy.\n   - The approach is both pure (no external dependencies) and efficient in terms of logging.\n\n```diff\ndiff --git a/bigbluebutton-apps/src/main/java/org/bigbluebutton/webconference/voice/ClientManager.java b/bigbluebutton-apps/src/main/java/org/bigbluebutton/webconference/voice/ClientManager.java\nindex 3a2aa8fbbc..129d11cc56 100755\n--- a/bigbluebutton-apps/src/main/java/org/bigbluebutton/webconference/voice/ClientManager.java\n+++ b/bigbluebutton-apps/src/main/java/org/bigbluebutton/webconference/voice/ClientManager.java\n@@ -1,4 +1,3 @@\n-package org.bigbluebutton.webconference.voice;\n+package org.bigbluebutton.webconference.voice;\n\n import java.util.ArrayList;\n import java.util.List;\n@@ -25,7 +25,6 @@ private class ClientManager implements ClientNotifier {\n     }\n \n private void joined(String room, Integer participantId, String name, Boolean muted,\n-\t\t\tJoiner joiner, boolean talking, boolean locked) {\n+\t\t\tJoiner joiner, boolean locked) {\n \t\tlog.debug(\"Participant \" + name + \" joining room \" + room);\n @@ -35,10 +34,7 @@ private void joined(String room, Integer participantId, String name, Boolean muted,\n     }\n \n private void left(String room, Joiner joiner) {\n-\t}\n+\t}\n \n private void locked(String room, Integer participantId, boolean locked) {\n-log.debug(\"Participant \" + participantId + \" is locked = \" + locked);\n+\t}\n \n private void talking(String room, Integer participantId, boolean talking) {\n-log.debug(\"Participant \" + participantId + \" is talking = \" + talking);\n+\t}\n \n private void locked(String room, Integer participantId, boolean locked) {\n+\t}\n```",
      "repository": "bigbluebutton",
      "commit_hash_before": "33d98bbff261b969d139a225e089ecbb3ad4b583",
      "commit_hash_current": "8c912df4591f5054a574b55be9b57d0b9157319d",
      "technical_evidence": "public muteAllBut(room String, mute Boolean, dontMuteThese List<Integer>) : void extracted from public mute(room String, mute Boolean) : void in class org.bigbluebutton.webconference.voice.ConferenceService; public isMuteLocked() : boolean from class org.bigbluebutton.webconference.voice.internal.ParticipantImp to public isLocked() : boolean from class org.bigbluebutton.conference.Room; public muteAllBut(room String, mute Boolean, dontMuteThese List<Integer>) : void extracted from public mute(room String, mute Boolean) : void in class org.bigbluebutton.webconference.voice.ConferenceService",
      "diff_source": "direct"
    },
    {
      "hash": "8c9b0d1dffd2debaa111c9261b864fa2ef728bd7",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "Here is the complete classification of the changes made to the code:\n\n```diff\n--- a/plugins/dojo/src/main/resources/org/apache/struts2/static/dojo/struts/widget/Bind.js\n+++ b/plugins/dojo/src/main/resources/org/apache/struts2/static/dojo/struts/widget/Bind.js\n@@ -1,38 +0,0 @@\n-/*\n- * $Id$\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *  http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.struts2.dojo.views.velocity.components;\n-\n-import javax.servlet.httpHttpServletRequest;\n-import javax.servlet.http.ResponseEntity;\n-\n-import org.apache.commons.utils.html.*\n-import org.apache.commons.utils.util.*; // For empty string handling\n-\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n\n```",
      "llm_confidence": "low",
      "project_name": "struts",
      "analysis_timestamp": "2025-08-31T20:21:35.314701",
      "diff_size": 217261,
      "diff_lines": 6448,
      "llm_raw_response": "Here is the complete classification of the changes made to the code:\n\n```diff\n--- a/plugins/dojo/src/main/resources/org/apache/struts2/static/dojo/struts/widget/Bind.js\n+++ b/plugins/dojo/src/main/resources/org/apache/struts2/static/dojo/struts/widget/Bind.js\n@@ -1,38 +0,0 @@\n-/*\n- * $Id$\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *  http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.struts2.dojo.views.velocity.components;\n-\n-import javax.servlet.httpHttpServletRequest;\n-import javax.servlet.http.ResponseEntity;\n-\n-import org.apache.commons.utils.html.*\n-import org.apache.commons.utils.util.*; // For empty string handling\n-\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n+/**\n+  * A simple HTML template that displays the form.\n+  *\n+  * @param stack The value stack for the form\n+  * @param request handler for HTTP requests\n+  * @param response handler for HTTP responses\n+ */\n-/**\n- * @see Form\n- */\n-public class Form {\n-    protected Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n-        return new Form(stack, req, res);\n-    }\n-}\n+\n+/** @var Do not use this */\n+static final boolean doNotUse = true;\n+\n\n```",
      "repository": "struts",
      "commit_hash_before": "11b70d957d95c2952fde040a3640dab8ddc6b146",
      "commit_hash_current": "8c9b0d1dffd2debaa111c9261b864fa2ef728bd7",
      "technical_evidence": "public Form(stack ValueStack, request HttpServletRequest, response HttpServletResponse) from class org.apache.struts2.dojo.components.Form to public AbstractValidateBean(stack ValueStack, request HttpServletRequest, response HttpServletResponse) from class org.apache.struts2.dojo.components.AbstractValidateBean",
      "diff_source": "direct"
    },
    {
      "hash": "8d1cbf58ea47ea829eb4c7ea76572dab36a10d69",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "Analysis failed - insufficient data",
      "llm_confidence": "low",
      "project_name": "jongo",
      "analysis_timestamp": "2025-08-31T20:25:16.715889",
      "diff_size": 21192,
      "diff_lines": 552
    },
    {
      "hash": "8d4765a3c831260e18f8a5d4935b4025846cc573",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "```\ndiff --git a/graylog2/events/ClusterEventCleanupPeriodicalTest.java b/graylog2/events/ClusterEventCleanupPeriodicalTest.java\nindex 4d2c361577..0000000000 100644\n--- a/graylog2/events/ClusterEventCleanupPeriodicalTest.java\n+++ b/graylog2/events/ClusterEventCleanupPeriodicalTest.java\n@@ -1,118 +0,0 @@\n-/**\n- * This file is part of Graylog.\n- *\n- * Graylog is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Graylog is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-package org.graylog2.events;\n-\n-import com.codahale.metrics.json.MetricsModule;\n-import com.fasterxml.jackson.databind ObjectMapper;\n-import com.fasterxml.jackson.databind[propertyNamingStrategy];\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-import com.fasterxml.jackson.databind.module.JodaModule;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.runnersJUnitRunner;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.concurrent.TimeUnit;\n-\n-import static com.lordofthejars.nosqlunit.mongodb.InMemoryMongoDb.InMemoryMongoRule.newInMemoryMongoDbRule;\n-import static org.apache.commons.utils date-time DateTimeUtils;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class ClusterEventCleanupPeriodicalTest {\n-    @ClassRule\n-    public MongoConnectionRule mongoRule = MongoConnectionRule.build(\"test\");\n-\n-    private final ObjectMapper lineNumber = new ObjectMapper()\n-            .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n-            .setPropertyNamingStrategy(new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy())\n-            .registerModule(new JodaModule())\n-            .registerModule(new GuavaModule())\n-            .registerModule(new MetricsModule(TimeUnit.SECONDS, TimeUnit.SECONDS, false))\n-            .registerModule(new SimpleModule()\n-                    .addSerializer(new ObjectIdSerializer())\n-                    .addSerializer(new RangeJsonSerializer())\n-                    .addSerializer(new SizeSerializer()));\n-\n-    private MongoConnection mongoConnection;\n-    private ClusterEventCleanupPeriodical clusterEventCleanupPeriodical;\n-\n-    @Before\n-    public void setUpService() throws Exception {\n-        DateTimeUtils.setCurrentMillisFixed(TIME.getMillis());\n-\n-        this.mongoConnection = mongoRule.getMongoConnection();\n-\n-        MongoJackObjectMapperProvider provider = new MongoJackObjectMapperProvider(objectMapper);\n-        this.clusterEventCleanupPeriodical = new ClusterEventCleanupPeriodical(provider, mongoRule.getMongoConnection());\n-    }\n-\n-    @After\n-    public void tearDown() {\n-        DateTimeUtils.setCurrentMillisSystem();\n-    }\n-\n-    @Test\n-    @UsingDataSet(loadStrategy = LoadStrategyEnum.DELETE_ALL)\n-    public void testDoRun() throws Exception {\n-        final DBCollection collection = mongoConnection.getDatabase().getCollection(ClusterEventPeriodical.COLLECTION_NAME);\n-        assertThat(insertEvent(collection, 0L)).isTrue();\n-        assertThat(insertEvent(collection, TIME.getMillis())).isTrue();\n-        assertThat(insertEvent(collection, TIME.minus(ClusterEventCleanupPeriodical.DEFAULT_MAX_EVENT_AGE).getMillis())).isTrue();\n-        assertThat(insertEvent(collection, TIME.minus(2 * ClusterEventCleanupPeriodical.DEFAULT_MAX_EVENT_AGE).getMillis())).isTrue();\n-        assertThat(collection.count()).isEqualTo(4L);\n-\n-        clusterEventCleanupPeriodical.run();\n-\n-        assertThat(collection.count()).isEqualTo(2L);\n-    }\n-\n-    \n-    private boolean insertEvent(DBCollection collection, long timestamp) {\n-        DBObject event = new BasicDBObjectBuilder()\n-                .add(\"timestamp\", timestamp)\n-                .add(\"producer\", \"TEST-PRODUCER\")\n-                .add(\"consumers\", Collections.emptyList())\n-                .add(\"event_class\", String.class.getCanonicalName())\n-                .add(\"payload\", \"Test\" + timestamp)\n-                .get();\n-        return collection.save(event).getN() == 1;\n-    }\n-}\n```\n\nThis diff shows that the test is performing a run on the cluster event cleanup periodical, which is a structural change rather than a purely behavioral one. The test now uses JUnit's After rule to assert the expected count of events after running the method.\n\n```diff\ndiff --git a/graylog2/events/ClusterEventCleanupPeriodicalTest.java b/graylog2/events/ClusterEventCleanupPeriodicalTest.java\n--- a/graylog2/events/ClusterEventCleanupPeriodicalTest.java\n+++ b/graylog2/events/ClusterEventCleanupPeriodicalTest.java\n@@ -1,118 +0,0 @@\n-/**\n- * This file is part of Graylog.\n- *\n- * Graylog is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Graylog is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-package org.graylog2.events;\n-\n-import com.codahale.metrics.json.MetricsModule;\n-import com.fasterxml.jackson.databind ObjectMapper;\n-import com.fasterxml.jackson.databind[propertyNamingStrategy];\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-import com.fasterxml.jackson.databind.module.JodaModule;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.runnersJUnitRunner;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.concurrent.TimeUnit;\n-\n-import static com.lordofthejars.nosqlunit.mongodb.InMemoryMongoDb.InMemoryMongoRule.newInMemoryMongoDbRule;\n-import static org.apache.commons.utils date-time DateTimeUtils;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class ClusterEventCleanupPeriodicalTest {\n-    @ClassRule\n-    public MongoConnectionRule mongoRule = MongoConnectionRule.build(\"test\");\n-\n-    private final ObjectMapper lineNumber = new ObjectMapper()\n-            .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n-            .setPropertyNamingStrategy(new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy())\n-            .registerModule(new JodaModule())\n-            .registerModule(new GuavaModule())\n-            .registerModule(new MetricsModule(TimeUnit.SECONDS, TimeUnit.SECONDS, false))\n-            .registerModule(new SimpleModule()\n-                    .addSerializer(new ObjectIdSerializer())\n-                    .addSerializer(new RangeJsonSerializer())\n-                    .addSerializer(new SizeSerializer()));\n-\n-    private MongoConnection mongoConnection;\n-    private ClusterEventCleanupPeriodical clusterEventCleanupPeriodical;\n-\n-    @Before\n-    public void setUpService() throws Exception {\n-        DateTimeUtils.setCurrentMillisFixed(TIME.getMillis());\n-\n-        this.mongoConnection = mongoRule.getMongoConnection();\n-\n-        MongoJackObjectMapperProvider provider = new MongoJackObjectMapperProvider(objectMapper);\n-        this.clusterEventCleanupPeriodical = new ClusterEventCleanupPeriodical(provider, mongoRule.getMongoConnection());\n-    }\n-\n-    @After\n-    public void tearDown() {\n-        DateTimeUtils.setCurrentMillisSystem();\n-    }\n-\n-    @Test\n-    @UsingDataSet(loadStrategy = LoadStrategyEnum.DELETE_ALL)\n-    public void testDoRun() throws Exception {\n-        final DBCollection collection = mongoConnection.getDatabase().getCollection(ClusterEventPeriodical.COLLECTION_NAME);\n-        assertThat(insertEvent(collection, 0L)).isTrue();\n-        assertThat(insertEvent(collection, TIME.getMillis())).isTrue();\n-        assertThat(insertEvent(collection, TIME.minus(ClusterEventCleanupPeriodical.DEFAULT_MAX_EVENT_AGE).getMillis())).isTrue();\n-        assertThat(insertEvent(collection, TIME.minus(2 * ClusterEventCleanupPeriodical.DEFAULT_MAX_EVENT_AGE).getMillis())).isTrue();\n-        assertThat(collection.count()).isEqualTo(4L);\n-\n-        clusterEventCleanupPeriodical.run();\n-\n-        assertThat(collection.count()).isEqualTo(2L);\n-    }\n-\n-    \n-    private boolean insertEvent(DBCollection collection, long timestamp) {\n-        DBObject event = new BasicDBObjectBuilder()\n-                .add(\"timestamp\", timestamp)\n-                .add(\"producer\", \"TEST-PRODUCER\")\n-                .add(\"consumers\", Collections.emptyList())\n-                .add(\"event_class\", String.class.getCanonicalName())\n-                .add(\"payload\", \"Test\" + timestamp)\n-                .get();\n-        return collection.save(event).getN() == 1;\n-    }\n-}\n```",
      "llm_confidence": "low",
      "project_name": "graylog2-server",
      "analysis_timestamp": "2025-08-31T20:25:40.522843",
      "diff_size": 11126,
      "diff_lines": 264,
      "llm_raw_response": "```\ndiff --git a/graylog2/events/ClusterEventCleanupPeriodicalTest.java b/graylog2/events/ClusterEventCleanupPeriodicalTest.java\nindex 4d2c361577..0000000000 100644\n--- a/graylog2/events/ClusterEventCleanupPeriodicalTest.java\n+++ b/graylog2/events/ClusterEventCleanupPeriodicalTest.java\n@@ -1,118 +0,0 @@\n-/**\n- * This file is part of Graylog.\n- *\n- * Graylog is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Graylog is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-package org.graylog2.events;\n-\n-import com.codahale.metrics.json.MetricsModule;\n-import com.fasterxml.jackson.databind ObjectMapper;\n-import com.fasterxml.jackson.databind[propertyNamingStrategy];\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-import com.fasterxml.jackson.databind.module.JodaModule;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.runnersJUnitRunner;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.concurrent.TimeUnit;\n-\n-import static com.lordofthejars.nosqlunit.mongodb.InMemoryMongoDb.InMemoryMongoRule.newInMemoryMongoDbRule;\n-import static org.apache.commons.utils date-time DateTimeUtils;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class ClusterEventCleanupPeriodicalTest {\n-    @ClassRule\n-    public MongoConnectionRule mongoRule = MongoConnectionRule.build(\"test\");\n-\n-    private final ObjectMapper lineNumber = new ObjectMapper()\n-            .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n-            .setPropertyNamingStrategy(new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy())\n-            .registerModule(new JodaModule())\n-            .registerModule(new GuavaModule())\n-            .registerModule(new MetricsModule(TimeUnit.SECONDS, TimeUnit.SECONDS, false))\n-            .registerModule(new SimpleModule()\n-                    .addSerializer(new ObjectIdSerializer())\n-                    .addSerializer(new RangeJsonSerializer())\n-                    .addSerializer(new SizeSerializer()));\n-\n-    private MongoConnection mongoConnection;\n-    private ClusterEventCleanupPeriodical clusterEventCleanupPeriodical;\n-\n-    @Before\n-    public void setUpService() throws Exception {\n-        DateTimeUtils.setCurrentMillisFixed(TIME.getMillis());\n-\n-        this.mongoConnection = mongoRule.getMongoConnection();\n-\n-        MongoJackObjectMapperProvider provider = new MongoJackObjectMapperProvider(objectMapper);\n-        this.clusterEventCleanupPeriodical = new ClusterEventCleanupPeriodical(provider, mongoRule.getMongoConnection());\n-    }\n-\n-    @After\n-    public void tearDown() {\n-        DateTimeUtils.setCurrentMillisSystem();\n-    }\n-\n-    @Test\n-    @UsingDataSet(loadStrategy = LoadStrategyEnum.DELETE_ALL)\n-    public void testDoRun() throws Exception {\n-        final DBCollection collection = mongoConnection.getDatabase().getCollection(ClusterEventPeriodical.COLLECTION_NAME);\n-        assertThat(insertEvent(collection, 0L)).isTrue();\n-        assertThat(insertEvent(collection, TIME.getMillis())).isTrue();\n-        assertThat(insertEvent(collection, TIME.minus(ClusterEventCleanupPeriodical.DEFAULT_MAX_EVENT_AGE).getMillis())).isTrue();\n-        assertThat(insertEvent(collection, TIME.minus(2 * ClusterEventCleanupPeriodical.DEFAULT_MAX_EVENT_AGE).getMillis())).isTrue();\n-        assertThat(collection.count()).isEqualTo(4L);\n-\n-        clusterEventCleanupPeriodical.run();\n-\n-        assertThat(collection.count()).isEqualTo(2L);\n-    }\n-\n-    \n-    private boolean insertEvent(DBCollection collection, long timestamp) {\n-        DBObject event = new BasicDBObjectBuilder()\n-                .add(\"timestamp\", timestamp)\n-                .add(\"producer\", \"TEST-PRODUCER\")\n-                .add(\"consumers\", Collections.emptyList())\n-                .add(\"event_class\", String.class.getCanonicalName())\n-                .add(\"payload\", \"Test\" + timestamp)\n-                .get();\n-        return collection.save(event).getN() == 1;\n-    }\n-}\n```\n\nThis diff shows that the test is performing a run on the cluster event cleanup periodical, which is a structural change rather than a purely behavioral one. The test now uses JUnit's After rule to assert the expected count of events after running the method.\n\n```diff\ndiff --git a/graylog2/events/ClusterEventCleanupPeriodicalTest.java b/graylog2/events/ClusterEventCleanupPeriodicalTest.java\n--- a/graylog2/events/ClusterEventCleanupPeriodicalTest.java\n+++ b/graylog2/events/ClusterEventCleanupPeriodicalTest.java\n@@ -1,118 +0,0 @@\n-/**\n- * This file is part of Graylog.\n- *\n- * Graylog is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Graylog is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-package org.graylog2.events;\n-\n-import com.codahale.metrics.json.MetricsModule;\n-import com.fasterxml.jackson.databind ObjectMapper;\n-import com.fasterxml.jackson.databind[propertyNamingStrategy];\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-import com.fasterxml.jackson.databind.module.JodaModule;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.runnersJUnitRunner;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.concurrent.TimeUnit;\n-\n-import static com.lordofthejars.nosqlunit.mongodb.InMemoryMongoDb.InMemoryMongoRule.newInMemoryMongoDbRule;\n-import static org.apache.commons.utils date-time DateTimeUtils;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class ClusterEventCleanupPeriodicalTest {\n-    @ClassRule\n-    public MongoConnectionRule mongoRule = MongoConnectionRule.build(\"test\");\n-\n-    private final ObjectMapper lineNumber = new ObjectMapper()\n-            .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n-            .setPropertyNamingStrategy(new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy())\n-            .registerModule(new JodaModule())\n-            .registerModule(new GuavaModule())\n-            .registerModule(new MetricsModule(TimeUnit.SECONDS, TimeUnit.SECONDS, false))\n-            .registerModule(new SimpleModule()\n-                    .addSerializer(new ObjectIdSerializer())\n-                    .addSerializer(new RangeJsonSerializer())\n-                    .addSerializer(new SizeSerializer()));\n-\n-    private MongoConnection mongoConnection;\n-    private ClusterEventCleanupPeriodical clusterEventCleanupPeriodical;\n-\n-    @Before\n-    public void setUpService() throws Exception {\n-        DateTimeUtils.setCurrentMillisFixed(TIME.getMillis());\n-\n-        this.mongoConnection = mongoRule.getMongoConnection();\n-\n-        MongoJackObjectMapperProvider provider = new MongoJackObjectMapperProvider(objectMapper);\n-        this.clusterEventCleanupPeriodical = new ClusterEventCleanupPeriodical(provider, mongoRule.getMongoConnection());\n-    }\n-\n-    @After\n-    public void tearDown() {\n-        DateTimeUtils.setCurrentMillisSystem();\n-    }\n-\n-    @Test\n-    @UsingDataSet(loadStrategy = LoadStrategyEnum.DELETE_ALL)\n-    public void testDoRun() throws Exception {\n-        final DBCollection collection = mongoConnection.getDatabase().getCollection(ClusterEventPeriodical.COLLECTION_NAME);\n-        assertThat(insertEvent(collection, 0L)).isTrue();\n-        assertThat(insertEvent(collection, TIME.getMillis())).isTrue();\n-        assertThat(insertEvent(collection, TIME.minus(ClusterEventCleanupPeriodical.DEFAULT_MAX_EVENT_AGE).getMillis())).isTrue();\n-        assertThat(insertEvent(collection, TIME.minus(2 * ClusterEventCleanupPeriodical.DEFAULT_MAX_EVENT_AGE).getMillis())).isTrue();\n-        assertThat(collection.count()).isEqualTo(4L);\n-\n-        clusterEventCleanupPeriodical.run();\n-\n-        assertThat(collection.count()).isEqualTo(2L);\n-    }\n-\n-    \n-    private boolean insertEvent(DBCollection collection, long timestamp) {\n-        DBObject event = new BasicDBObjectBuilder()\n-                .add(\"timestamp\", timestamp)\n-                .add(\"producer\", \"TEST-PRODUCER\")\n-                .add(\"consumers\", Collections.emptyList())\n-                .add(\"event_class\", String.class.getCanonicalName())\n-                .add(\"payload\", \"Test\" + timestamp)\n-                .get();\n-        return collection.save(event).getN() == 1;\n-    }\n-}\n```",
      "repository": "graylog2-server",
      "commit_hash_before": "0135fba3ccf17cda82f0100eef5d7d1614ae667f",
      "commit_hash_current": "8d4765a3c831260e18f8a5d4935b4025846cc573",
      "technical_evidence": "protected run() : void from class org.graylog2.events.ClusterEventService to public doRun() : void from class org.graylog2.events.ClusterEventPeriodical",
      "diff_source": "direct"
    },
    {
      "hash": "8ddb32cc24968b53d0b718390024f1ac13782377",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "```\nFINAL: FLOSS\n{\n    \"repository\": \"https://github.com/apache/cassandra\",\n    \"commit_hash_before\": \"6bdf96a5bc2cd9c8722c207668931f1c074dbe6a\",\n    \"commit_hash_current\": \"8ddb32cc24968b53d0b718390024f1ac13782377\",\n    \"refactoring_type\": \"floss\",\n    \"justification\": \"The code changes are behavioral modifications that do not alter the underlying data structure.\",\n    \"columns\": {\n        \"col\": 1\n    }\n}\n```",
      "llm_confidence": "unknown",
      "project_name": "cassandra",
      "analysis_timestamp": "2025-08-31T20:25:47.372741",
      "diff_size": 9600,
      "diff_lines": 192,
      "llm_raw_response": "```\nFINAL: FLOSS\n{\n    \"repository\": \"https://github.com/apache/cassandra\",\n    \"commit_hash_before\": \"6bdf96a5bc2cd9c8722c207668931f1c074dbe6a\",\n    \"commit_hash_current\": \"8ddb32cc24968b53d0b718390024f1ac13782377\",\n    \"refactoring_type\": \"floss\",\n    \"justification\": \"The code changes are behavioral modifications that do not alter the underlying data structure.\",\n    \"columns\": {\n        \"col\": 1\n    }\n}\n```",
      "repository": "https://github.com/apache/cassandra",
      "commit_hash_before": "6bdf96a5bc2cd9c8722c207668931f1c074dbe6a",
      "commit_hash_current": "8ddb32cc24968b53d0b718390024f1ac13782377"
    },
    {
      "hash": "8de8d4c62713c0cc80839b4d24cb1bc011040587",
      "purity_classification": true,
      "llm_classification": "PURE",
      "llm_justification": "Here is the complete classification of the changes made to `SoundFragment.java`:\n\n1. **Behavioral vs Structural Modifications**:\n   - The class was modified from a `ScriptActivityFragment` to a `LoaderScriptActivityFragment`.\n   - It now implements `OnSoundEditListener`, which allows it to be used as an editor.\n   - It also provides methods for saving and getting the state, making it more user-friendly.\n\n2. **Technical Indicators**:\n   - The class uses `Activity` to manage its lifecycle.\n   - It implements `OnSoundEditListener` and `LoaderScriptActivityFragment`.\n\n3. **Final Classification**:\n```\nfinal pure or final floss fLOSS\n```",
      "llm_confidence": "unknown",
      "project_name": "Catroid",
      "analysis_timestamp": "2025-08-31T20:25:51.031816",
      "diff_size": 42420,
      "diff_lines": 1216,
      "llm_raw_response": "Here is the complete classification of the changes made to `SoundFragment.java`:\n\n1. **Behavioral vs Structural Modifications**:\n   - The class was modified from a `ScriptActivityFragment` to a `LoaderScriptActivityFragment`.\n   - It now implements `OnSoundEditListener`, which allows it to be used as an editor.\n   - It also provides methods for saving and getting the state, making it more user-friendly.\n\n2. **Technical Indicators**:\n   - The class uses `Activity` to manage its lifecycle.\n   - It implements `OnSoundEditListener` and `LoaderScriptActivityFragment`.\n\n3. **Final Classification**:\n```\nfinal pure or final floss fLOSS\n```",
      "repository": "https://github.com/Catrobat/Catroid",
      "commit_hash_before": "6b713dc0be9b7be8b0cfb15d1acf4b6ac8638276",
      "commit_hash_current": "8de8d4c62713c0cc80839b4d24cb1bc011040587"
    },
    {
      "hash": "8df7151d15cedfffd4d934f0d2108f880eae778f",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "Analysis failed - insufficient data",
      "llm_confidence": "low",
      "project_name": "autopsy",
      "analysis_timestamp": "2025-08-31T20:25:55.978928",
      "diff_size": 26813,
      "diff_lines": 524,
      "llm_raw_response": "Let me analyze the changes shown in the diff:\n\n1. **Behavioral vs Structural Modifications**:\n   - The `getAllChildPropertyHeadersRec` method is a behavioral modification that adds new functionality to process child nodes.\n   - The `loadColumnOrder` method is a structural modification as it modifies how properties are loaded based on column order preferences.\n\n2. **Technical Indicators**:\n   - Behavioral: Adds processing of child nodes and property sets.\n   - Structural: Modifies the way properties are loaded by considering their position in the table's filter node hierarchy.\n\n3. **Analysis**:\n   - The `getAllChildPropertyHeadersRec` method is a behavioral change that adds new functionality to process child nodes and their properties.\n   - The `loadColumnOrder` method is a structural modification as it changes how properties are loaded based on column order preferences.\n\n4. **JSON Representation**:\n\n```json\n{\n  \"classification\": {\n    \"behavioral\": true,\n    \"structural\": true\n  },\n  \"diff_source\": \"https://github.com/yourusername/yourrepo/commit/yourcommit-id\",\n  \"diff_target\": \"https://github.com/yourusername/yourrepo/commit/yourcommit-id\"\n}\n```",
      "repository": "autopsy",
      "commit_hash_before": "9863eade854c8c59a2196642a4a71a6274748957",
      "commit_hash_current": "8df7151d15cedfffd4d934f0d2108f880eae778f",
      "technical_evidence": "private getAllChildProperties(node Node) : List<Property<?>> extracted from private loadColumnOrder() : List<Node.Property<?>> in class org.sleuthkit.autopsy.corecomponents.DataResultViewerTable; private getAllChildProperties(node Node) : List<Property<?>> extracted from private loadColumnOrder() : List<Node.Property<?>> in class org.sleuthkit.autopsy.corecomponents.DataResultViewerTable",
      "diff_source": "https://github.com/yourusername/yourrepo/commit/yourcommit-id"
    },
    {
      "hash": "8dfe46bfba3a86cff9ee6d519fa83f9852c0f4fb",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "Analysis failed - insufficient data",
      "llm_confidence": "low",
      "project_name": "bigbluebutton",
      "analysis_timestamp": "2025-08-31T20:31:24.892062",
      "diff_size": 88179,
      "diff_lines": 1758
    },
    {
      "hash": "8e344b3f917f457136a820d24f1c7f31333c3654",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "Analysis failed - insufficient data",
      "llm_confidence": "low",
      "project_name": "BuildCraft",
      "analysis_timestamp": "2025-08-31T20:31:29.954649",
      "diff_size": 10345,
      "diff_lines": 270,
      "llm_raw_response": "```\ndiff --git a/.../pipes/PipeLogicWood.java b/.../pipes/PipeLogicWood.java\nindex 1a1b29f..3025395 100644\n--- a/.../pipes/PipeLogicWood.java\n+++ b/.../pipes/PipeLogicWood.java\n@@ -96,7 +96,7 @@ public abstract class PipeLogicWood {\n \t\treturn false;\n \t}\n \n-\tpublic void onNeighborBlockChange(int blockId) {\n+\tpublic void onNeighborBlockChange() {\n \t\tif (!pipe.container.getWorldObj().isRemote) {\n \t\t\tswitchSourceIfNeeded();\n }\n```\n\n```json\n{\n  \"analysis\": [\n    {\n      \"behavioral_modifications\": [\n        {\n          \"source\": \"Switch source is now only needed if the pipe is remote\",\n          \"effect\": \"Removes unnecessary switch source when pipe is not remote\"\n        }\n      ]\n    },\n    {\n      \"structural_modifications\": [\n        {\n          \"source\": \"if (!pipe.container.getWorldObj().isRemote) {\",\n          \"effect\": \"Adds check for remote origin of pipe\"\n        }\n      ]\n    }\n  ],\n  \"classification\": \"PURE\",\n  \"diff_source\": \"direct\"\n}\n```",
      "repository": "BuildCraft",
      "commit_hash_before": "47cba60750998eb300fcf7b4fdf213afb5655e1f",
      "commit_hash_current": "8e344b3f917f457136a820d24f1c7f31333c3654",
      "technical_evidence": "protected computeConnection(side ForgeDirection) : void extracted from protected computeConnections() : void in class buildcraft.transport.TileGenericPipe",
      "diff_source": "direct"
    },
    {
      "hash": "8ea2d2a6a15bc1f791711d55b4345c233020d753",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "Here is the complete classification of the changes made to the `cassandra.yaml` file:\n\n1. **Behavioral Changes**:\n   - Added configuration for key cache size (`key_cache_size_in_mb`)\n   - Configured memory table flush queue size (`memtable_flush_queue_size`)\n   - Set default value for maximum hint window (`max_hint_window_in_ms`)\n   - Configured throttling delay after each hint delivery (`hinted_handoff_throttle_delay_in_ms` and `hinted_handoff_throttle_in_kb`)\n   - Added configuration for commitlog file size (`commitlog_segment_size_in_mb`)\n   - Set default value for maximum hints per thread (`max_hints_delivery_threads`)\n\n2. **Structural Changes**:\n   - Removed duplicate comments\n   - Improved formatting of the `authenticator` field\n   - Reorganized the configuration list into logical sections\n\n3. **Technical Indicators**:\n   - Configured memory table flush queue size (4)\n   - Added buffer size for column slices (increased to 128 MB)\n\nThese changes enhance the flexibility and efficiency of the Cassandra configuration while improving maintainability through better organization and clearer documentation.",
      "llm_confidence": "low",
      "project_name": "cassandra",
      "analysis_timestamp": "2025-08-31T20:31:38.170744",
      "diff_size": 2894070,
      "diff_lines": 62784,
      "llm_raw_response": "Here is the complete classification of the changes made to the `cassandra.yaml` file:\n\n1. **Behavioral Changes**:\n   - Added configuration for key cache size (`key_cache_size_in_mb`)\n   - Configured memory table flush queue size (`memtable_flush_queue_size`)\n   - Set default value for maximum hint window (`max_hint_window_in_ms`)\n   - Configured throttling delay after each hint delivery (`hinted_handoff_throttle_delay_in_ms` and `hinted_handoff_throttle_in_kb`)\n   - Added configuration for commitlog file size (`commitlog_segment_size_in_mb`)\n   - Set default value for maximum hints per thread (`max_hints_delivery_threads`)\n\n2. **Structural Changes**:\n   - Removed duplicate comments\n   - Improved formatting of the `authenticator` field\n   - Reorganized the configuration list into logical sections\n\n3. **Technical Indicators**:\n   - Configured memory table flush queue size (4)\n   - Added buffer size for column slices (increased to 128 MB)\n\nThese changes enhance the flexibility and efficiency of the Cassandra configuration while improving maintainability through better organization and clearer documentation.",
      "repository": "cassandra",
      "commit_hash_before": "2fd3268b4841ff14d1c27bdcb4f80efc4174ffd0",
      "commit_hash_current": "8ea2d2a6a15bc1f791711d55b4345c233020d753",
      "technical_evidence": "public applyPropertiesTo(cfmd CFMetaData) : void extracted from public getCFMetaData() : CFMetaData in class org.apache.cassandra.cql3.statements.CreateColumnFamilyStatement; public applyPropertiesTo(cfmd CFMetaData) : void extracted from public getCFMetaData() : CFMetaData in class org.apache.cassandra.cql3.statements.CreateColumnFamilyStatement",
      "diff_source": "direct"
    },
    {
      "hash": "8eccb80a317082897dc04d033fce500ac43e70aa",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "Here's a step-by-step explanation of the changes made to the `cassandra.yaml` file:\n\n1. **Key Cache Size Adjustment**: The key cache size was reduced from 2 MB to 0, allowing all keys to be saved in memory.\n2. **Row Cache Saving**: The row cache size was increased from 0 to 100, ensuring more rows are saved for better performance during cold starts.\n3. **Row Cache Provider Update**: The default provider changed from `ConcurrentLinkedHashCacheProvider` to `SerializingCacheProvider`, which is known for efficient caching of streaming data.\n\nThese changes aim to improve cache performance and reduce memory usage while maintaining high-speed operations.",
      "llm_confidence": "high",
      "project_name": "cassandra",
      "analysis_timestamp": "2025-08-31T20:31:41.825193",
      "diff_size": 3274435,
      "diff_lines": 76286,
      "llm_raw_response": "Here's a step-by-step explanation of the changes made to the `cassandra.yaml` file:\n\n1. **Key Cache Size Adjustment**: The key cache size was reduced from 2 MB to 0, allowing all keys to be saved in memory.\n2. **Row Cache Saving**: The row cache size was increased from 0 to 100, ensuring more rows are saved for better performance during cold starts.\n3. **Row Cache Provider Update**: The default provider changed from `ConcurrentLinkedHashCacheProvider` to `SerializingCacheProvider`, which is known for efficient caching of streaming data.\n\nThese changes aim to improve cache performance and reduce memory usage while maintaining high-speed operations.",
      "repository": "cassandra",
      "commit_hash_before": "ba0f2bc33ec98c6b1f83683cfb4a8eb7a16933b0",
      "commit_hash_current": "8eccb80a317082897dc04d033fce500ac43e70aa",
      "technical_evidence": "private isRowCacheEnabled() : boolean extracted from private getColumnFamily(filter QueryFilter, gcBefore int) : ColumnFamily in class org.apache.cassandra.db.ColumnFamilyStore",
      "diff_source": "direct"
    },
    {
      "hash": "8eea3946cb80cfdd649cc22ea14d7897ed7b3c18",
      "purity_classification": true,
      "llm_classification": "FLOSS",
      "llm_justification": "The changes made to `MavenArtifactTest.java` are structural modifications rather than behavioral ones. The test class has been completely rewritten to use JUnit's testing framework instead of the older `assertAll()` utility. This includes:\n\n1. Removed the import of static imports from `org.junit.Assert`\n2. Simplified the test structure\n3. Updated tests to be more maintainable and consistent\n\nThe new implementation is better aligned with modern Java best practices and follows the Javadoc conventions for unit testing.\n\n```diff\ndiff --git a/guvnor-webapp-core/src/test/java/org/drools/guvnor/client/rpc/MavenArtifactTest.java b/guvnor-webapp-core/src/test/java/org/drools/guvnor/client/rpc/MavenArtifactTest.java\nindex 0000000000..db12393941\n--- a/guvnor-webapp-core/src/test/java/org/drools/guvnor/client/rpc/MavenArtifactTest.java\n+++ b/guvnor-webapp-core/src/test/java/org/drools/guvnor/client/rpc/MavenArtifactTest.java\n@@ -0,0 +1,3 @@\n+import static org.junit.Assert.*;\n+\n+public class MavenArtifactTest {\n+\n+    @Test\n+    public void testConstructFromStringWithoutComplement() {\n+        final String mavenArtifactValue = \"org.drools:knowledge-api:jar:5.4.0-SNAPSHOT:compile\";\n+        final MavenArtifact artifact = new MavenArtifact(mavenArtifactValue);\n+\n+        assertNotNull(artifact);\n+        assertNotNull(artifact.getChild());\n+        assertEquals(false, artifact.hasChild());\n+        assertEquals(true, artifact.isNecessaryOnRuntime());\n+        assertEquals(\"knowledge-api-5.4.0-SNAPSHOT.jar\", artifact.toFileName());\n+        assertEquals(\"http://my/site/org/drools/knowledge-api/5.4.0-SNAPSHOT/knowledge-api-5.4.0-SNAPSHOT.jar\",\n+                artifact.toURL(\"http://my/site\"));\n+        assertEquals(\"http://my/site/org/drools/knowledge-api/5.4.0-SNAPSHOT/knowledge-api-5.4.0-SNAPSHOT.jar\",\n+                artifact.toURL(\"http://my/site\"));\n+        assertEquals(\"org.drools:knowledge-api-5.4.0-SNAPSHOT.jar\", artifact.toLabel());\n+        assertEquals(mavenArtifactValue,\n+                artifact.toValue());\n+    }\n+\n+    @Test\n+    public void testConstructFromStringWithComplement() {\n+        final String mavenArtifactValue = \"org.apache.camel:camel-core:test-jar:tests:2.4.0:test\";\n+        final MavenArtifact artifact = new MavenArtifact(mavenArtifactValue);\n+\n+        assertNotNull(artifact);\n+        assertNotNull(artifact.getChild());\n+        assertEquals(false, artifact.hasChild());\n+        assertEquals(true, artifact.isNecessaryOnRuntime());\n+        assertEquals(\"camel-core-2.4.0-tests.jar\", artifact.toFileName());\n+        assertEquals(\"http://my/site/org/apache/camel/camel-core/2.4.0/camel-core-2.4.0-tests.jar\",\n+                artifact.toURL(\"http://my/site\"));\n+        assertEquals(\"http://my/site/org/apache/camel/camel-core/2.4.0/camel-core-2.4.0-tests.jar\",\n+                artifact.toURL(\"http://my/site\"));\n+        assertEquals(\"org.apache.camel:camel-core-2.4.0-tests.jar\", artifact.toLabel());\n+        assertEquals(mavenArtifactValue,\n+                artifact.toValue());\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        final String mavenArtifactValue = \"org.apache.camel:camel-core:test-jar:tests:2.4.0:test\";\n        final MavenArtifact artifact = new MavenArtifact(mavenArtifactValue);\n+\n+        assertEquals(new MavenArtifact(mavenArtifactValue), artifact);\n+        assertEquals(new MavenArtifact(mavenArtifactValue).hashCode(), artifact.hashCode());\n+\n+        final MavenArtifact parent = new MavenArtifact(\"org.springframework:spring:jar:2.5.6:compile\");\n+        parent.addChild(new MavenArtifact(\"commons-logging:commons-logging:jar:1.1.1:compile\"));\n+\n+        assertEquals(new MavenArtifact(\"org.springframework:spring:jar:2.5.6:compile\"), parent);\n+        assertEquals(new MavenArtifact(\"org.springframework:spring:jar:2.5.6:compile\").hashCode(), parent.hashCode());\n+    }\n```",
      "llm_confidence": "low",
      "project_name": "guvnor",
      "analysis_timestamp": "2025-08-31T20:31:54.081899",
      "diff_size": 236149,
      "diff_lines": 5513,
      "llm_raw_response": "The changes made to `MavenArtifactTest.java` are structural modifications rather than behavioral ones. The test class has been completely rewritten to use JUnit's testing framework instead of the older `assertAll()` utility. This includes:\n\n1. Removed the import of static imports from `org.junit.Assert`\n2. Simplified the test structure\n3. Updated tests to be more maintainable and consistent\n\nThe new implementation is better aligned with modern Java best practices and follows the Javadoc conventions for unit testing.\n\n```diff\ndiff --git a/guvnor-webapp-core/src/test/java/org/drools/guvnor/client/rpc/MavenArtifactTest.java b/guvnor-webapp-core/src/test/java/org/drools/guvnor/client/rpc/MavenArtifactTest.java\nindex 0000000000..db12393941\n--- a/guvnor-webapp-core/src/test/java/org/drools/guvnor/client/rpc/MavenArtifactTest.java\n+++ b/guvnor-webapp-core/src/test/java/org/drools/guvnor/client/rpc/MavenArtifactTest.java\n@@ -0,0 +1,3 @@\n+import static org.junit.Assert.*;\n+\n+public class MavenArtifactTest {\n+\n+    @Test\n+    public void testConstructFromStringWithoutComplement() {\n+        final String mavenArtifactValue = \"org.drools:knowledge-api:jar:5.4.0-SNAPSHOT:compile\";\n+        final MavenArtifact artifact = new MavenArtifact(mavenArtifactValue);\n+\n+        assertNotNull(artifact);\n+        assertNotNull(artifact.getChild());\n+        assertEquals(false, artifact.hasChild());\n+        assertEquals(true, artifact.isNecessaryOnRuntime());\n+        assertEquals(\"knowledge-api-5.4.0-SNAPSHOT.jar\", artifact.toFileName());\n+        assertEquals(\"http://my/site/org/drools/knowledge-api/5.4.0-SNAPSHOT/knowledge-api-5.4.0-SNAPSHOT.jar\",\n+                artifact.toURL(\"http://my/site\"));\n+        assertEquals(\"http://my/site/org/drools/knowledge-api/5.4.0-SNAPSHOT/knowledge-api-5.4.0-SNAPSHOT.jar\",\n+                artifact.toURL(\"http://my/site\"));\n+        assertEquals(\"org.drools:knowledge-api-5.4.0-SNAPSHOT.jar\", artifact.toLabel());\n+        assertEquals(mavenArtifactValue,\n+                artifact.toValue());\n+    }\n+\n+    @Test\n+    public void testConstructFromStringWithComplement() {\n+        final String mavenArtifactValue = \"org.apache.camel:camel-core:test-jar:tests:2.4.0:test\";\n+        final MavenArtifact artifact = new MavenArtifact(mavenArtifactValue);\n+\n+        assertNotNull(artifact);\n+        assertNotNull(artifact.getChild());\n+        assertEquals(false, artifact.hasChild());\n+        assertEquals(true, artifact.isNecessaryOnRuntime());\n+        assertEquals(\"camel-core-2.4.0-tests.jar\", artifact.toFileName());\n+        assertEquals(\"http://my/site/org/apache/camel/camel-core/2.4.0/camel-core-2.4.0-tests.jar\",\n+                artifact.toURL(\"http://my/site\"));\n+        assertEquals(\"http://my/site/org/apache/camel/camel-core/2.4.0/camel-core-2.4.0-tests.jar\",\n+                artifact.toURL(\"http://my/site\"));\n+        assertEquals(\"org.apache.camel:camel-core-2.4.0-tests.jar\", artifact.toLabel());\n+        assertEquals(mavenArtifactValue,\n+                artifact.toValue());\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        final String mavenArtifactValue = \"org.apache.camel:camel-core:test-jar:tests:2.4.0:test\";\n        final MavenArtifact artifact = new MavenArtifact(mavenArtifactValue);\n+\n+        assertEquals(new MavenArtifact(mavenArtifactValue), artifact);\n+        assertEquals(new MavenArtifact(mavenArtifactValue).hashCode(), artifact.hashCode());\n+\n+        final MavenArtifact parent = new MavenArtifact(\"org.springframework:spring:jar:2.5.6:compile\");\n+        parent.addChild(new MavenArtifact(\"commons-logging:commons-logging:jar:1.1.1:compile\"));\n+\n+        assertEquals(new MavenArtifact(\"org.springframework:spring:jar:2.5.6:compile\"), parent);\n+        assertEquals(new MavenArtifact(\"org.springframework:spring:jar:2.5.6:compile\").hashCode(), parent.hashCode());\n+    }\n```",
      "repository": "guvnor",
      "commit_hash_before": "6516525a56b61597037a4aa579f649a04824b07f",
      "commit_hash_current": "8eea3946cb80cfdd649cc22ea14d7897ed7b3c18",
      "technical_evidence": "public validateAsset(asset AssetItem) : BuilderResult from class org.drools.guvnor.server.contenthandler.SpringContextContentHandler to public validateAsset(asset AssetItem) : BuilderResult from class org.drools.guvnor.server.contenthandler.PlainTextContentHandler; private createBuilderResult(message String, name String, format String, uuid String) : BuilderResult from class org.drools.guvnor.server.contenthandler.SpringContextContentHandler to private createBuilderResult(message String, name String, format String, uuid String) : BuilderResult from class org.drools.guvnor.server.contenthandler.PlainTextContentHandler; public validateAsset(asset AssetItem) : BuilderResult from class org.drools.guvnor.server.contenthandler.drools.ChangeSetContentHandler to public validateAsset(asset AssetItem) : BuilderResult from class org.drools.guvnor.server.contenthandler.PlainTextContentHandler",
      "diff_source": "direct"
    }
  ],
  "summary": {
    "total_commits": 14,
    "classifications": {
      "FLOSS": 13,
      "PURE": 1
    },
    "convergence_analysis": {
      "agree": 0,
      "disagree": 14
    }
  }
}